ByteTime is an ios app which, naturally, uses objective-c as it's source language. The app allows for creation of user accounts, so we decided to use a Parse database to store dynamically created information required by the app. We chose Parse so we could advantage of its extensive framework, particularly the PFUser implementation. In our app, users are stored as PFUsers in Parse. 

We created another Parse class, "Table" to store information regarding the tables created by each of our users. The "Table" class contains information regarding the "owner" of the table, the "location" of the meal represented by the table, and the "time" the meal will take place. Queries to this Parse table were used to populate the newsfeed. 

Another parse class "tableRelations" is used to store information regarding which users have joined which tables. Each time a user 'joins' a table a new PFObject is created in tableRelations, storing the id of the table they have joined, as well as the name of the user. This is used to list each of the members of each table. 

In order to endow users with the ability to follow each other, we created yet another Parse class called "relationships". Each time a user follows another user a 'relationship' is created in parse, storing the username of each user. Queries to this class were used to list a users followers, and who the user is following. This class is also used to restrict newsfeed tables to only those belonging to the user and the user's friends. 

Structurally, we created a homepage displaying your tables and your friends' tables so that when the user reopens the app after already logging in, the first thing he/she will see is information that will be useful -- tables that are relevant. We also divided the homepage into two view controllers that represent the two main subcategories of the app's functionality: friending other users/them following you, and managing tables. In the friending users section, we design it so that you can see a screen to follow users, with two more tabs directing you to see who you're following and who is following you -- simple. Similarly for tables, you see a screen to create a table, with two more tabs directing you to "my tables" (i.e. tables you've created) and "joined tables" (tables you've joined, in case you want to unjoin). 

All of the pages (other than the "Create table" and "follow user" pages) are PFQuerytables, which is a subclass of the UITableViewController type provided in Xcode. We chose to specifically use PFQuerytables because they populated each table for you with your customized query -- we didn't need to worry about calling the query and manually populating the cells, although some of the PFQuerytables required us to run an extra query separately in each cell (i.e. to populate with the member names of each table), which was still not a problem in the PFQuerytable format. We designed it so that on the homepage, the table showed all relevant information and a "join" button, allowing the user to join any tables he/she desires. There is a similar "unjoin" button on the "joined tables" page for an unjoin function. We have wired up segues as much as possible so that after creating a table, for e.g., the user is taken to the relevant screen (my tables) to see what he/she had just performed. Segues are the transitions between each screen in the storyboard. We also created "unwind segues" (i.e. segues that move back to the home screen) in each of the "my tables" and "joined tables" to allow users to easily access the homepage. When the "join" button is pressed, we have coded error checking into our queries to alert the user when he/she is trying to join his/her own table, or a table that he/she already joined. 

 

